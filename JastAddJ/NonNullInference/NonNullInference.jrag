aspect NonNullInference {

  // collect assignment sites through the generic collecting phase in the front-end
  public void VarAccess.updateRemoteAttributeCollectionsFrontend() {
    if(isDest()) {
      ASTNode node = this;
      while(node != null && !(node instanceof AssignExpr))
        node = node.getParent();
      if(node != null && node instanceof AssignExpr) {
        AssignExpr assignExpr = (AssignExpr)node;
        Expr rhs = assignExpr.getSource();
        Variable v = decl();
        if(v instanceof FieldDeclaration)
          ((FieldDeclaration)v).addAssignment(rhs);
        else if(v instanceof ParameterDeclaration)
          ((ParameterDeclaration)v).addAssignment(rhs);
        else if(v instanceof VariableDeclaration)
          ((VariableDeclaration)v).addAssignment(rhs);
      }
    }
    super.updateRemoteAttributeCollectionsFrontend();
  }
  public void VariableDeclaration.addAssignment(Expr rhs) {
    if(assignments == null) assignments = new ArrayList();
    assignments.add(rhs);
  }
  private Collection VariableDeclaration.assignments = null;
  public Collection VariableDeclaration.assignments() {
    return assignments != null ? assignments : Collections.EMPTY_LIST;
  }
  public void FieldDeclaration.addAssignment(Expr rhs) {
    if(assignments == null) assignments = new ArrayList();
    assignments.add(rhs);
  }
  private Collection FieldDeclaration.assignments = null;
  public Collection FieldDeclaration.assignments() {
    return assignments != null ? assignments : Collections.EMPTY_LIST;
  }
  public void ParameterDeclaration.addAssignment(Expr rhs) {
    if(assignments == null) assignments = new ArrayList();
    assignments.add(rhs);
  }
  private Collection ParameterDeclaration.assignments = null;
  public Collection ParameterDeclaration.assignments() {
    return assignments != null ? assignments : Collections.EMPTY_LIST;
  }

  // collect returnValues for methods from return statements through the generic collecting phase in the front-end
  public void ReturnStmt.updateRemoteAttributeCollectionsFrontend() {
    if(hasResult()) {
      BodyDecl bodyDecl = enclosingBodyDecl();
      if(bodyDecl instanceof MethodDecl) {
        MethodDecl m = (MethodDecl)bodyDecl;
        if(m.type().isReferenceType())
          m.addReturnValue(getResult());
      }
    }
    super.updateRemoteAttributeCollectionsFrontend();
  }
  public void MethodDecl.addReturnValue(Expr rhs) {
    if(returnValues == null) returnValues = new ArrayList();
    returnValues.add(rhs);
  }
  private Collection MethodDecl.returnValues = null;
  public Collection MethodDecl.returnValues() {
    return returnValues != null ? returnValues : Collections.EMPTY_LIST;
  }
  
  // collect argumentValues for parameters from method accesses through the generic collecting phase in the front-end
  public void MethodAccess.updateRemoteAttributeCollectionsFrontend() {
    MethodDecl m = decl();
    m.addInvocation(this);
    for(int i = 0; i < m.getNumParameter(); i++)
      m.getParameter(i).addArgumentValue(getArg(i));
    super.updateRemoteAttributeCollectionsFrontend();
  }
  public void MethodDecl.addInvocation(MethodAccess m) {
    if(invocations == null) invocations = new ArrayList();
    invocations.add(m);
  }
  private Collection MethodDecl.invocations = null;
  public Collection MethodDecl.invocations() {
    return invocations != null ? invocations : Collections.EMPTY_LIST;
  }
  public void ParameterDeclaration.addArgumentValue(Expr rhs) {
    if(argumentValues == null) argumentValues = new ArrayList();
    argumentValues.add(rhs);
  }
  private Collection ParameterDeclaration.argumentValues = null;
  public Collection ParameterDeclaration.argumentValues() {
    return argumentValues != null ? argumentValues : Collections.EMPTY_LIST;
  }
  
  // collect argumentValues for paramters from class instance expressions, this(), and super() invocations
  public void ClassInstanceExpr.updateRemoteAttributeCollectionsFrontend() {
    ConstructorDecl c = decl();
    for(int i = 0; i < c.getNumParameter(); i++)
      c.getParameter(i).addArgumentValue(getArg(i));
    super.updateRemoteAttributeCollectionsFrontend();
  }
  // both constructor and superconstructor
  public void ConstructorAccess.updateRemoteAttributeCollectionsFrontend() {
    ConstructorDecl c = decl();
    for(int i = 0; i < c.getNumParameter(); i++)
      c.getParameter(i).addArgumentValue(getArg(i));
    super.updateRemoteAttributeCollectionsFrontend();
  }

  // collect back links for overrides, that is overriddenBy
  public void MethodDecl.updateRemoteAttributeCollectionsFrontend() {
    for(Iterator iter = overrides().iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      m.addOverriddenBy(this);
    }
    super.updateRemoteAttributeCollectionsFrontend();
  }
  public void MethodDecl.addOverriddenBy(MethodDecl m) {
    if(overriddenBy == null) overriddenBy = new ArrayList();
    overriddenBy.add(m);
  }
  private Collection MethodDecl.overriddenBy = null;
  public Collection MethodDecl.overriddenBy() {
    return overriddenBy != null ? overriddenBy : Collections.EMPTY_LIST;
  }  

  inh boolean Modifiers.nonNullDefault();
  syn boolean TypeDecl.nonNullDefault() =
    getModifiers().numModifier("@NonNull") != 0
    || getModifiers().nonNullDefault();
  eq TypeDecl.getBodyDecl().nonNullDefault() = nonNullDefault();
  eq Program.getChild().nonNullDefault() = false;

  syn lazy boolean Modifiers.isNotNull() = explicitNotNull() || (mayBeNotNull() && nonNullDefault() && !explicitNullable());
  syn boolean Modifiers.explicitNotNull() = numModifier("@NonNull") != 0;
  syn boolean Modifiers.explicitNullable() = numModifier("@Nullable") != 0;

  // only allow [NotNull] for reference types
  inh boolean Modifiers.mayBeNotNull();
  eq Program.getCompilationUnit().mayBeNotNull() = false;
  eq VariableDeclaration.getModifiers().mayBeNotNull() = getTypeAccess().type().isReferenceType();
  eq FieldDeclaration.getModifiers().mayBeNotNull() = getTypeAccess().type().isReferenceType();
  eq ParameterDeclaration.getModifiers().mayBeNotNull() = getTypeAccess().type().isReferenceType();
  eq MethodDecl.getModifiers().mayBeNotNull() = getTypeAccess().type().isReferenceType();
  eq TypeDecl.getModifiers().mayBeNotNull() = true;
  eq AnnotatedCompilationUnit.getModifiers().mayBeNotNull() = true;

  syn lazy boolean Modifiers.isRawObjectType() = numModifier("@Raw") != 0;
  syn lazy boolean Modifiers.isRawThisObjectType() = numModifier("@RawThis") != 0;

  // infere types
  syn lazy boolean FieldDeclaration.inferedNonNull() circular [true] {
    if(!type().isReferenceType()) return false;
    if(isStatic() && Program.rawEnabled) return false;
    if(!hostType().compilationUnit().canBeAnnotated()) return getModifiers().isNotNull();
    FieldDeclaration first = firstVariable();
    if(first != this) return first.inferedNonNull();
    for(Iterator i2 = first.variableSet().iterator(); i2.hasNext(); ) {
      FieldDeclaration v = (FieldDeclaration)i2.next();
      //if(v.getModifiers().isNotNull()) return true;
      if(v.hasInit() && !v.getInit().inferedNonNull())
        return false;
      for(Iterator iter = v.assignments().iterator(); iter.hasNext(); ) {
        Expr rhs = (Expr)iter.next();
        if(!rhs.inferedNonNull())
          return false;
      }
 
      if(isStatic()) {
        if(!hasInit())
          return false;
      }
      else {
        for(int j = 0; j < hostType().getNumBodyDecl(); j++) {
          if(hostType().getBodyDecl(j) instanceof ConstructorDecl) {
            ConstructorDecl c = (ConstructorDecl)hostType().getBodyDecl(j);
              if(!c.isDAafter(v))
                return false;
          }
        }
      }
    }
    return true;
  }
  syn lazy boolean VariableDeclaration.inferedNonNull() circular [true] {
    if(!type().isReferenceType()) return false;
    VariableDeclaration first = firstVariable();
    if(first != this) return first.inferedNonNull();
    for(Iterator i2 = first.variableSet().iterator(); i2.hasNext(); ) {
      VariableDeclaration v = (VariableDeclaration)i2.next();
      //if(v.getModifiers().isNotNull()) return true;
      if(v.hasInit() && !v.getInit().inferedNonNull())
        return false;
      for(Iterator iter = v.assignments().iterator(); iter.hasNext(); ) {
        Expr rhs = (Expr)iter.next();
        if(!rhs.inferedNonNull())
          return false;
      }
    }
    return true;
  }

  syn lazy boolean ParameterDeclaration.inferedNonNullLocally() circular [true] {
    for(Iterator iter = assignments().iterator(); iter.hasNext(); ) {
      Expr rhs = (Expr)iter.next();
      if(!rhs.inferedNonNull())
        return false;
    }
    for(Iterator iter = argumentValues().iterator(); iter.hasNext(); ) {
      Expr rhs = (Expr)iter.next();
      if(!rhs.inferedNonNull())
        return false;
    }
    return true;
  }
    
  syn lazy boolean ParameterDeclaration.inferedNonNull() circular [true] {
    if(!type().isReferenceType()) return false;
    //if(getModifiers().isNotNull()) return true;
    if(!hostType().compilationUnit().canBeAnnotated()) return getModifiers().isNotNull();
    if(getParent().getParent() instanceof MethodDecl) {
      int i = getParent().getIndexOfChild(this);
      MethodDecl hostMethod = (MethodDecl)getParent().getParent();
      MethodDecl firstMethod = hostMethod.firstMethod();
      if(hostMethod != firstMethod)
        return firstMethod.getParameter(i).inferedNonNull();

      for(Iterator iter = firstMethod.methodSet().iterator(); iter.hasNext(); ) {
        MethodDecl m = (MethodDecl)iter.next();
        if(!m.getParameter(i).inferedNonNullLocally())
          return false;
      }
      return true;
    }
    return inferedNonNullLocally();
  }
  
  syn lazy boolean MethodDecl.inferedNonNullLocally() circular [true] {
    for(Iterator iter = returnValues().iterator(); iter.hasNext(); ) {
      Expr rhs = (Expr)iter.next();
      if(!rhs.inferedNonNull())
        return false;
    }
    return true;
  }
  
  syn lazy boolean MethodDecl.inferedNonNull() circular [true] {
    if(!type().isReferenceType()) return false;
    //if(getModifiers().isNotNull()) return true;
    if(!hostType().compilationUnit().canBeAnnotated()) return getModifiers().isNotNull();

    // Covariant return types
    if(!inferedNonNullLocally())
      return false;
    for(Iterator iter = overriddenBy().iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(!m.inferedNonNull())
        return false;
    }
    
    /*
    // Invariant return types
    MethodDecl firstMethod = firstMethod();
    if(this != firstMethod)
      return firstMethod.inferedNonNull();
    for(Iterator iter = firstMethod.methodSet().iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(!m.inferedNonNullLocally())
        return false;
    }
    */
    return true;
  }
  
  eq VarAccess.inferedNonNull() {
    Variable v = decl();
    if(!v.type().isReferenceType())
      return false;
    if(v instanceof FieldDeclaration) {
      FieldDeclaration f = (FieldDeclaration)v;
      if(!Program.rawEnabled)
        return f.inferedNonNull();
      else if(isQualified())
        return f.inferedNonNull() && !qualifier().inferedRaw();
      else
        return f.inferedNonNull() && !inferedRawThisType();
    }
    else if(v instanceof ParameterDeclaration)
      return ((ParameterDeclaration)v).inferedNonNull() || inferedGuardedByNullCheck(v);
    else if(v instanceof VariableDeclaration)
      return ((VariableDeclaration)v).inferedNonNull() || inferedGuardedByNullCheck(v);
    else
      return false;
  }
  eq MethodAccess.inferedNonNull() = decl().inferedNonNull();
  
  eq ClassInstanceExpr.inferedNonNull() = true;

  eq StringLiteral.inferedNonNull() = true;

  syn lazy boolean Expr.inferedNonNull() circular [true] = false;
  
  eq AbstractDot.inferedNonNull() = lastAccess().inferedNonNull();
  
  eq ArrayInit.inferedNonNull() = false;

  eq AssignExpr.inferedNonNull() = getDest().inferedNonNull();
  
  eq ParExpr.inferedNonNull() = getExpr().inferedNonNull();

  eq ArrayCreationExpr.inferedNonNull() = true;

  eq Unary.inferedNonNull() = getOperand().inferedNonNull();

  eq CastExpr.inferedNonNull() = getExpr().inferedNonNull();

  eq ConditionalExpr.inferedNonNull() = getTrueExpr().inferedNonNull() && getFalseExpr().inferedNonNull();

  eq Binary.inferedNonNull() = false;
  eq AddExpr.inferedNonNull() = type().isString();

  eq ClassAccess.inferedNonNull() = true;
  
  eq RelationalExpr.inferedNonNull() = getLeftOperand().inferedNonNull() && getRightOperand().inferedNonNull();


  public static boolean Program.rawEnabled;

  // infer rawness
  syn lazy boolean FieldDeclaration.inferedRaw() circular [false] {
    if(!Program.rawEnabled) return false;
    if(!type().isReferenceType()) return false;
    if(!hostType().compilationUnit().canBeAnnotated()) return false;
    FieldDeclaration first = firstVariable();
    if(first != this) return first.inferedRaw();
    for(Iterator i2 = first.variableSet().iterator(); i2.hasNext(); ) {
      FieldDeclaration f = (FieldDeclaration)i2.next();
      if(f.getModifiers().isRawObjectType()) return true;
      if(f.hasInit() && f.getInit().inferedRaw())
        return true;
      for(Iterator iter = f.assignments().iterator(); iter.hasNext(); ) {
        Expr rhs = (Expr)iter.next();
        if(rhs.inferedRaw())
          return true;
      }
    }
    return false;
  }
  syn lazy boolean VariableDeclaration.inferedRaw() circular [false] {
    if(!Program.rawEnabled) return false;
    if(!type().isReferenceType()) return false;
    VariableDeclaration first = firstVariable();
    if(first != this) return first.inferedRaw();
    for(Iterator i2 = first.variableSet().iterator(); i2.hasNext(); ) {
      VariableDeclaration v = (VariableDeclaration)i2.next();
      if(v.getModifiers().isRawObjectType()) return true;
      if(v.hasInit() && v.getInit().inferedRaw())
        return true;
      for(Iterator iter = v.assignments().iterator(); iter.hasNext(); ) {
        Expr rhs = (Expr)iter.next();
        if(rhs.inferedRaw())
          return true;
      }
    }
    return false;
  }
  
  syn lazy boolean ParameterDeclaration.inferedRawLocally() circular [false] {
    if(!Program.rawEnabled) return false;
    for(Iterator iter = assignments().iterator(); iter.hasNext(); ) {
      Expr rhs = (Expr)iter.next();
      if(rhs.inferedRaw())
        return true;
    }
    for(Iterator iter = argumentValues().iterator(); iter.hasNext(); ) {
      Expr rhs = (Expr)iter.next();
      if(rhs.inferedRaw())
        return true;
    }
    return false;
  }
  
  syn lazy boolean ParameterDeclaration.inferedRaw() circular [false] {
    if(!Program.rawEnabled) return false;
    if(!type().isReferenceType()) return false;
    if(getModifiers().isRawObjectType()) return true;
    if(!hostType().compilationUnit().canBeAnnotated()) return false;
    if(getParent().getParent() instanceof MethodDecl) {
      int i = getParent().getIndexOfChild(this);
      MethodDecl hostMethod = (MethodDecl)getParent().getParent();
      MethodDecl firstMethod = hostMethod.firstMethod();
      if(hostMethod != firstMethod)
        return firstMethod.getParameter(i).inferedRaw();

      for(Iterator iter = firstMethod.methodSet().iterator(); iter.hasNext(); ) {
        MethodDecl m = (MethodDecl)iter.next();
        if(m.getParameter(i).inferedRawLocally())
          return true;
      }
      return false;
    }
    return inferedRawLocally();
  }
  
  syn lazy boolean MethodDecl.inferedRawLocally() circular [false] {
    if(!Program.rawEnabled) return false;
    for(Iterator iter = returnValues().iterator(); iter.hasNext(); ) {
      Expr rhs = (Expr)iter.next();
      if(rhs.inferedRaw())
        return true;
    }
    return false;
  }
  
  syn lazy boolean MethodDecl.inferedRaw() circular [false] {
    if(!Program.rawEnabled) return false;
    if(!type().isReferenceType()) return false;
    if(getModifiers().isRawObjectType()) return true;
    if(!hostType().compilationUnit().canBeAnnotated()) return false;
    MethodDecl firstMethod = firstMethod();
    if(this != firstMethod)
      return firstMethod.inferedRaw();
    for(Iterator iter = firstMethod.methodSet().iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(m.inferedRawLocally())
        return true;
    }
    return false;
  }

  eq Program.getCompilationUnit().inferedRawThisType() {
    throw new Error("Unsupported inferRawThisType");
  }
  eq TypeDecl.getBodyDecl().inferedRawThisType() = false;

  eq ConstructorDecl.getConstructorInvocation().inferedRawThisType() = true;
  eq ConstructorDecl.getBlock().inferedRawThisType() = true;

  eq InstanceInitializer.getBlock().inferedRawThisType() = true;
    
  eq MethodDecl.getBlock().inferedRawThisType() = inferedRawThis();
  
  inh lazy boolean ThisAccess.inferedRawThisType() circular [false];
  inh lazy boolean VarAccess.inferedRawThisType() circular [false];
  inh lazy boolean MethodAccess.inferedRawThisType() circular [false];

  syn lazy boolean MethodDecl.inferedRawThisLocally() circular [false] {
    for(Iterator iter = invocations().iterator(); iter.hasNext(); ) {
      MethodAccess m = (MethodAccess)iter.next();
      if(m.isQualified() && m.qualifier().inferedRaw())
        return true;
      if(!m.isQualified() && m.inferedRawThisType())
        return true;
    }
    return false;
  }
  
  syn lazy boolean MethodDecl.inferedRawThis() circular [false] {
    if(!Program.rawEnabled) return false;
    if(isStatic()) return false;
    if(getModifiers().isRawThisObjectType()) return true;
    if(!hostType().compilationUnit().canBeAnnotated()) return false;
    MethodDecl firstMethod = firstMethod();
    if(this != firstMethod)
      return firstMethod.inferedRawThis();
    for(Iterator iter = firstMethod.methodSet().iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(m.inferedRawThisLocally())
        return true;
    }
    return false;
  }
  
  eq VarAccess.inferedRaw() {
    Variable v = decl();
    if(!v.type().isReferenceType())
      return false;
    if(v instanceof FieldDeclaration)
      return ((FieldDeclaration)v).inferedRaw();
    else if(v instanceof ParameterDeclaration)
      return ((ParameterDeclaration)v).inferedRaw();
    else if(v instanceof VariableDeclaration)
      return ((VariableDeclaration)v).inferedRaw();
    else
      return false;
  }

  eq MethodAccess.inferedRaw() = decl().inferedRaw();
  
  eq ClassInstanceExpr.inferedRaw() = false;
  eq StringLiteral.inferedRaw() = false;

  eq ThisAccess.inferedRaw() = inferedRawThisType();

  syn lazy boolean Expr.inferedRaw() circular [false] = false;
  
  eq AbstractDot.inferedRaw() = lastAccess().inferedRaw();
  
  eq ArrayInit.inferedRaw() = false; //type().isNonNull();

  eq AssignExpr.inferedRaw() = getDest().inferedRaw();
  
  eq ParExpr.inferedRaw() = getExpr().inferedRaw();

  eq ArrayCreationExpr.inferedRaw() = false;

  eq Unary.inferedRaw() = getOperand().inferedRaw();
  eq CastExpr.inferedRaw() = getTypeAccess().inferedRaw();

  eq Binary.inferedRaw() = false;
  
  eq RelationalExpr.inferedRaw() = getLeftOperand().inferedRaw() || getRightOperand().inferedRaw();


  inh lazy boolean VarAccess.inferedGuardedByNullCheck(Variable v) circular [false];
  inh lazy boolean IfStmt.inferedGuardedByNullCheck(Variable v) circular [false];
  eq Program.getCompilationUnit(int index).inferedGuardedByNullCheck(Variable v) = false;
  eq TypeDecl.getBodyDecl().inferedGuardedByNullCheck(Variable v) = false;

  // IfStmt with explicit check against null is a guard
  eq IfStmt.getThen().inferedGuardedByNullCheck(Variable v) {
    if(getCondition() instanceof NEExpr) {
      NEExpr expr = (NEExpr)getCondition();
      if(expr.getLeftOperand().readOf(v) && expr.getRightOperand().type().isNull() ||
         expr.getRightOperand().readOf(v) && expr.getLeftOperand().type().isNull())
        return !updatedWithPossiblyNull(v);
    }
    return inferedGuardedByNullCheck(v);
  }
  eq IfStmt.getElse().inferedGuardedByNullCheck(Variable v) {
    if(getCondition() instanceof EQExpr) {
      EQExpr expr = (EQExpr)getCondition();
      if(expr.getLeftOperand().readOf(v) && expr.getRightOperand().type().isNull() ||
         expr.getRightOperand().readOf(v) && expr.getLeftOperand().type().isNull())
        return !updatedWithPossiblyNull(v);
      
    }
    return inferedGuardedByNullCheck(v);
  }

  syn boolean Expr.readOf(Variable v) = false;
  eq VarAccess.readOf(Variable v) = decl() == v && !isQualified() && !(v instanceof FieldDeclaration);
  //eq VarAccess.readOf(Variable v) = decl() == v && !(isQualified() && !qualifier().isThisAccess());
  //eq AbstractDot.readOf(Variable v) = getRight().readOf(v); 

  public boolean ASTNode.updatedWithPossiblyNull(Variable v) {
    for(int i = 0; i < getNumChild(); i++)
      if(getChild(i).updatedWithPossiblyNull(v))
        return true;
    return false;
  }
  public boolean VarAccess.updatedWithPossiblyNull(Variable v) {
    if(isDest()) {
      ASTNode node = this;
      while(node != null && !(node instanceof AssignExpr))
        node = node.getParent();
      if(node != null && node instanceof AssignExpr) {
        AssignExpr assignExpr = (AssignExpr)node;
        Expr rhs = assignExpr.getSource();
        if(decl() == v && !rhs.inferedNonNull())
          return true;
      }
    }
    return false;
  }


  // group all methods that overrides one another taking both classes and interface into account

  // the first method in the set
  syn MethodDecl MethodDecl.firstMethod() = overrides().isEmpty() && overriddenBy().isEmpty() ? this : (MethodDecl)methodSet().iterator().next();

  // the set of methods that overrides each other
  public HashSet MethodDecl.methodSet = null;
  public HashSet MethodDecl.methodSet() {
    if(methodSet == null) {
      methodSet = new HashSet();
      buildSet(methodSet);
    }
    return methodSet;
  }

  // transitatively visit overriding methods and build a set that each method references
  // only visit methods that have not been processed yet
  // use the set reference in each method to indicate that the method is visited
  public void MethodDecl.buildSet(HashSet set) {
    set.add(this);
    methodSet = set;
    for(Iterator iter = overrides().iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(m.methodSet == null)
        m.buildSet(set);
    }
    for(Iterator iter = overriddenBy().iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(m.methodSet == null)
        m.buildSet(set);
    }
  }

  public void ASTNode.updateRemoteAttributeCollectionsFrontend() {
    for(int i = 0; i < getNumChild(); i++)
      getChild(i).updateRemoteAttributeCollectionsFrontend();
  }
  public void CompilationUnit.updateRemoteAttributeCollectionsFrontend() {
    if(fromSource())
      super.updateRemoteAttributeCollectionsFrontend();
  }

  syn lazy HashSet MethodDecl.overrides() {
    HashSet set = new HashSet();
    for(Iterator iter = hostType().ancestorMethods(signature()).iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(overrides(m)) {
        set.add(m);
        set.addAll(m.overrides());
      }
    }
    return set;
  }

  syn lazy boolean CompilationUnit.canBeAnnotated() = 
    fromSource() && options().files().contains(relativeName());


  /**
   * Returns the first variable of a composite declaration.
   * @return If this variable is in a composite, the first in that composite is returned.
   *         Otherwise this variable is returned.
   */
  syn lazy VariableDeclaration VariableDeclaration.firstVariable() {
    if (!secondaryPartOfComposite()) return this;
    if (!(getParent() instanceof List)) // Should not happen. Secondary should be in a list.
      return this;
    List list = (List)getParent();
	int i = list.getIndexOfChild(this);
	if(i == 0 || !(list.getChild(i-1) instanceof VariableDeclaration))
	  // Should not happen. There should be a VariableDeclaration to the left of a secondary.
	  return this; 
	VariableDeclaration prev = (VariableDeclaration)list.getChild(i-1);
	if (prev.secondaryPartOfComposite())
	  return prev.firstVariable();
	else
	  return prev;
  }

  /**
   * Checks if this variable is part of a composite, but not the first declaration.
   * @return True in that case.
   */
  syn lazy boolean VariableDeclaration.secondaryPartOfComposite() {
    Access a = getTypeAccess();
    while(a instanceof ArrayTypeAccess)
      a = ((ArrayTypeAccess)a).getAccess();
    return a.getStart() == 0;
  }

  syn SimpleSet VariableDeclaration.variableSet() {
    if(firstVariable() != this) return SimpleSet.emptySet;
    if(!(getParent() instanceof List))
      return SimpleSet.emptySet.add(this);
    List list = (List)getParent();
    int i = list.getIndexOfChild(this) + 1;
    SimpleSet set = SimpleSet.emptySet.add(this);
    while(i < list.getNumChild()) {
      ASTNode node = list.getChild(i++);
      if(!(node instanceof VariableDeclaration))
        break;
      VariableDeclaration v = (VariableDeclaration)node;
      if(!sameVariableSet(v))
        break;
      set = set.add(v);
    }
    return set;
  }

  /**
   * Checks if this variable is in the same composite declaration as v.
   * @param  v
   * @return True in that case.
   */
  syn boolean VariableDeclaration.sameVariableSet(VariableDeclaration v) {
    return firstVariable() == v.firstVariable();
  }

  /**
   * Returns the first field of a composite declaration.
   * @return If this field is in a composite, the first in that composite is returned.
   *         Otherwise this field is returned.
   */
  syn lazy FieldDeclaration FieldDeclaration.firstVariable() {
    if (!secondaryPartOfComposite()) return this;
    if (!(getParent() instanceof List)) // Should not happen. Secondary should be in a list.
      return this;
    List list = (List)getParent();
	int i = list.getIndexOfChild(this);
	if(i == 0 || !(list.getChild(i-1) instanceof FieldDeclaration))
	  // Should not happen. There should be a FieldDeclaration to the left of a secondary.
	  return this; 
	FieldDeclaration prev = (FieldDeclaration)list.getChild(i-1);
	if (prev.secondaryPartOfComposite())
	  return prev.firstVariable();
	else
	  return prev;
  }

  /**
   * Checks if this field is part of a composite, but not the first declaration.
   * @return True in that case.
   */
  syn lazy boolean FieldDeclaration.secondaryPartOfComposite() {
    Access a = getTypeAccess();
    while(a instanceof ArrayTypeAccess)
      a = ((ArrayTypeAccess)a).getAccess();
    return a.getStart() == 0;
  }

  syn SimpleSet FieldDeclaration.variableSet() {
    if(firstVariable() != this) return SimpleSet.emptySet;
    List list = (List)getParent();
    int i = list.getIndexOfChild(this) + 1;
    SimpleSet set = SimpleSet.emptySet.add(this);
    while(i < list.getNumChild()) {
      ASTNode node = list.getChild(i++);
      if(!(node instanceof FieldDeclaration))
        break;
      FieldDeclaration v = (FieldDeclaration)node;
      if(!sameVariableSet(v))
        break;
      set = set.add(v);
    }
    return set;
  }

  /**
   * Checks if this field is in the same composite declaration as v.
   * @param  v
   * @return True in that case.
   */
  syn boolean FieldDeclaration.sameVariableSet(FieldDeclaration v) {
    return firstVariable() == v.firstVariable();
  }

}
